# Makefile Template for Digital Design Projects
# Enhanced with simulation and waveform viewing

PROJECT = PROJECT_NAME_PLACEHOLDER
TOP_MODULE = adder
TESTBENCH = adder_tb

# Directories
RTL_DIR = sources/rtl
TB_DIR = sources/tb
SIM_DIR = sim
WAVE_DIR = $(SIM_DIR)/waves
LOG_DIR = $(SIM_DIR)/logs
FILELIST = sources/rtl_list.f

# Tools - auto-detect available simulators
IVERILOG := $(shell command -v iverilog 2> /dev/null)
VVP := $(shell command -v vvp 2> /dev/null)
VERILATOR := $(shell command -v verilator 2> /dev/null)
GTKWAVE := $(shell command -v gtkwave 2> /dev/null)
YOSYS := $(shell command -v yosys 2> /dev/null)

# Simulation files
SIM_TOP = $(SIM_DIR)/$(PROJECT)_sim
WAVE_FILE = $(WAVE_DIR)/adder_waves.vcd
FST_FILE = $(WAVE_DIR)/adder_waves.fst

# Default target
.PHONY: help
help:
	@echo "=== $(PROJECT) Build System ==="
	@echo ""
	@echo "Available targets:"
	@echo "  help          - Show this help"
	@echo "  check-tools   - Check available tools"
	@echo "  update_list   - Update rtl_list.f with current source files"
	@echo ""
	@echo "Simulation targets:"
	@echo "  sim           - Run simulation with Icarus Verilog"
	@echo "  sim-verilator - Run simulation with Verilator (if available)"
	@echo "  waves         - View waveforms with GTKWave"
	@echo "  sim-waves     - Run simulation and open waveforms"
	@echo ""
	@echo "Synthesis targets:"
	@echo "  synth         - Synthesize with Yosys (basic)"
	@echo ""
	@echo "Utility targets:"
	@echo "  quick-test    - Update list and run simulation"
	@echo "  clean         - Clean generated files"
	@echo "  clean-all     - Clean everything including logs"
	@echo ""
	@echo "Status:"
	@echo "  Top module:   $(TOP_MODULE)"
	@echo "  Testbench:    $(TESTBENCH)"

# Check available tools
.PHONY: check-tools
check-tools:
	@echo "=== Tool Availability Check ==="
ifndef IVERILOG
	@echo "ERROR: Icarus Verilog not found - install with: sudo apt install iverilog"
else
	@echo "OK: Icarus Verilog: $(IVERILOG)"
endif
ifndef GTKWAVE
	@echo "ERROR: GTKWave not found - install with: sudo apt install gtkwave"
else
	@echo "OK: GTKWave: $(GTKWAVE)"
endif
ifdef VERILATOR
	@echo "OK: Verilator: $(VERILATOR)"
else
	@echo "INFO: Verilator not found - install with: sudo apt install verilator"
endif
ifdef YOSYS
	@echo "OK: Yosys: $(YOSYS)"
else
	@echo "INFO: Yosys not found - install with: sudo apt install yosys"
endif

# Update file list with absolute paths
.PHONY: update_list
update_list:
	@echo "Updating rtl_list.f with current source files..."
	@echo "# RTL and Testbench File List" > $(FILELIST)
	@echo "# Generated by 'make update_list'" >> $(FILELIST)
	@echo "# Date: $(shell date)" >> $(FILELIST)
	@echo "# Project: $(PROJECT)" >> $(FILELIST)
	@echo "" >> $(FILELIST)
	@echo "# RTL Source Files" >> $(FILELIST)
	@find $(PWD)/$(RTL_DIR) -name "*.v" -o -name "*.sv" -o -name "*.vhd" -o -name "*.vhdl" | sort >> $(FILELIST) 2>/dev/null || true
	@echo "" >> $(FILELIST)
	@echo "# Testbench Files" >> $(FILELIST)
	@find $(PWD)/$(TB_DIR) -name "*_tb.v" -o -name "*_tb.sv" -o -name "tb_*.v" -o -name "tb_*.sv" | sort >> $(FILELIST) 2>/dev/null || true
	@echo "File list updated: $(FILELIST)"
	@echo "Found $(shell grep -c '^/' $(FILELIST) 2>/dev/null || echo 0) files"

# Icarus Verilog simulation
.PHONY: sim
sim: $(SIM_TOP)
	@if [ -z "$(IVERILOG)" ]; then \
		echo "ERROR: Icarus Verilog not available. Run 'make check-tools' for installation instructions."; \
		exit 1; \
	fi
	@echo "Running simulation..."
	@mkdir -p $(LOG_DIR)
	@$(VVP) $(SIM_TOP) | tee $(LOG_DIR)/simulation.log
	@echo "Simulation complete!"
	@echo "Log file: $(LOG_DIR)/simulation.log"
	@echo "Waveform: $(WAVE_FILE)"
	@echo "View waves: make waves"

# Compile simulation
$(SIM_TOP): $(FILELIST)
	@if [ -z "$(IVERILOG)" ]; then \
		echo "ERROR: Icarus Verilog not found"; \
		exit 1; \
	fi
	@echo "Compiling simulation..."
	@mkdir -p $(SIM_DIR) $(WAVE_DIR)
	@if [ ! -s $(FILELIST) ]; then \
		echo "WARNING: File list is empty. Run 'make update_list' first."; \
		exit 1; \
	fi
	@if ! grep -q "^/" $(FILELIST); then \
		echo "WARNING: No source files found in $(FILELIST)"; \
		echo "TIP: Add your RTL files to $(RTL_DIR)/ and testbenches to $(TB_DIR)/"; \
		echo "TIP: Then run 'make update_list'"; \
		exit 1; \
	fi
	@$(IVERILOG) -g2005 -f $(FILELIST) -s $(TESTBENCH) -o $(SIM_TOP)
	@echo "Compilation successful!"

# Verilator simulation (if available)
.PHONY: sim-verilator
sim-verilator:
ifdef VERILATOR
	@echo "Running Verilator simulation..."
	@mkdir -p $(SIM_DIR) $(WAVE_DIR) $(LOG_DIR)
	@echo "WARNING: Verilator simulation target needs implementation"
	@echo "TIP: This would require C++ testbench generation"
else
	@echo "ERROR: Verilator not available. Install with: sudo apt install verilator"
endif

# View waveforms
.PHONY: waves
waves:
	@if [ -z "$(GTKWAVE)" ]; then \
		echo "ERROR: GTKWave not available. Install with: sudo apt install gtkwave"; \
		exit 1; \
	fi
	@if [ -f "$(WAVE_FILE)" ]; then \
		echo "Opening waveforms: $(WAVE_FILE)"; \
		$(GTKWAVE) $(WAVE_FILE) & \
	elif [ -f "$(FST_FILE)" ]; then \
		echo "Opening waveforms: $(FST_FILE)"; \
		$(GTKWAVE) $(FST_FILE) & \
	else \
		echo "ERROR: No waveform files found"; \
		echo "TIP: Run 'make sim' first to generate waveforms"; \
		exit 1; \
	fi

# Run simulation and open waveforms
.PHONY: sim-waves
sim-waves: sim waves

# Basic synthesis
.PHONY: synth
synth:
ifdef YOSYS
	@echo "Running synthesis..."
	@mkdir -p backend/synth
	@if [ ! -s $(FILELIST) ]; then \
		echo "WARNING: File list is empty. Run 'make update_list' first."; \
		exit 1; \
	fi
	@# Basic synthesis - you may need to customize for your target
	$(YOSYS) -p "read -f $(FILELIST); hierarchy -top $(TOP_MODULE); synth; write_json backend/synth/$(PROJECT).json"
	@echo "Synthesis complete: backend/synth/$(PROJECT).json"
else
	@echo "ERROR: Yosys not available. Install with: sudo apt install yosys"
endif

# Clean targets
.PHONY: clean
clean:
	@echo "Cleaning simulation files..."
	rm -f $(SIM_DIR)/*.vvp
	rm -f $(WAVE_DIR)/*.vcd $(WAVE_DIR)/*.fst $(WAVE_DIR)/*.lxt*
	rm -f backend/synth/*.json backend/pnr/*.asc backend/bitstream/*.bin
	@echo "Clean complete!"

.PHONY: clean-all
clean-all: clean
	@echo "Cleaning all generated files..."
	rm -f $(LOG_DIR)/*.log
	rm -rf $(SIM_DIR)/obj_dir/  # Verilator objects
	@echo "Deep clean complete!"

# Show project status
.PHONY: status
status:
	@echo "=== $(PROJECT) Status ==="
	@echo "Project: $(PROJECT)"
	@echo "Top module: $(TOP_MODULE)"
	@echo "Testbench: $(TESTBENCH)"
	@echo ""
	@echo "Source files:"
	@find $(RTL_DIR) -name "*.v" -o -name "*.sv" 2>/dev/null | wc -l | awk '{print "  RTL files: " $$1}'
	@find $(TB_DIR) -name "*_tb.v" -o -name "tb_*.v" 2>/dev/null | wc -l | awk '{print "  Testbenches: " $$1}'
	@echo ""
	@echo "Available tools:"
	@make check-tools 2>/dev/null | grep -E "OK:|ERROR:"

# Quick test target - runs simulation with existing files
.PHONY: quick-test
quick-test: update_list sim-waves
	@echo "Quick test complete! Simulation finished."

.PHONY: all sim sim-verilator waves sim-waves synth clean clean-all